4 Intermediate Importing Data in R
Establish a connection
The first step to import data from a SQL database is creating a connection to it. As Filip explained, you need different packages depending on the database you want to connect to. All of these packages do this in a uniform way, as specified in the DBI package.

dbConnect() creates a connection between your R session and a SQL database. The first argument has to be a DBIdriver object, that specifies how connections are made and how data is mapped between R and the database. Specifically for MySQL databases, you can build such a driver with RMySQL::MySQL().

If the MySQL database is a remote database hosted on a server, you'll also have to specify the following arguments in dbConnect(): dbname, host, port, user and password. Most of these details have already been provided.

Instructions
100 XP
Instructions
100 XP
Load the DBI library, which is already installed on DataCamp's servers.
Edit the dbConnect() call to connect to the MySQL database. Change the port argument (3306) and user argument ("student").
Take Hint (-30 XP)
# Load the DBI package
library(DBI)

# Edit dbConnect() call
con <- dbConnect(RMySQL::MySQL(), 
                 dbname = "tweater", 
                 host = "courses.csrrinzqubik.us-east-1.rds.amazonaws.com", 
                 port = 3306,
                 user = "student",
                 password = "datacamp")
                 
 #List the database tables
After you've successfully connected to a remote MySQL database, the next step is to see what tables the database contains. You can do this with the dbListTables() function. As you might remember from the video, this function requires the connection object as an input, and outputs a character vector with the table names.

Instructions
100 XP
Add code to create a vector tables, that contains the tables in the tweater database. You can connect to this database through the con object.
Display the structure of tables; what's the class of this vector?
# Load the DBI package
library(DBI)

# Connect to the MySQL database: con
con <- dbConnect(RMySQL::MySQL(), 
                 dbname = "tweater", 
                 host = "courses.csrrinzqubik.us-east-1.rds.amazonaws.com", 
                 port = 3306,
                 user = "student",
                 password = "datacamp")

# Build a vector of table names: tables
tables<-dbListTables(con)

# Display structure of tables
str(tables)
Import users
As you might have guessed by now, the database contains data on a more tasty version of Twitter, namely Tweater. Users can post tweats with short recipes for delicious snacks. People can comment on these tweats. There are three tables: users, tweats, and comments that have relations among them. Which ones, you ask? You'll discover in a moment!

Let's start by importing the data on the users into your R session. You do this with the dbReadTable() function. Simply pass it the connection object (con), followed by the name of the table you want to import. The resulting object is a standard R data frame.

Instructions
100 XP
Instructions
100 XP
Add code that imports the "users" table from the tweater database and store the resulting data frame as users.
Print the users data frame.
# Load the DBI package
library(DBI)

# Connect to the MySQL database: con
con <- dbConnect(RMySQL::MySQL(), 
                 dbname = "tweater", 
                 host = "courses.csrrinzqubik.us-east-1.rds.amazonaws.com", 
                 port = 3306,
                 user = "student",
                 password = "datacamp")

# Import the users table from tweater: users
users<- dbReadTable(con,"users")

# Print users
users
Import all tables
Next to the users, we're also interested in the tweats and comments tables. However, separate dbReadTable() calls for each and every one of the tables in your database would mean a lot of code duplication. Remember about the lapply() function? You can use it again here! A connection is already coded for you, as well as a vector table_names, containing the names of all the tables in the database.

Instructions
100 XP
Finish the lapply() function to import the users, tweats and comments tables in a single call. The result, a list of data frames, will be stored in the variable tables.
Print tables to check if you got it right.
# Load the DBI package
library(DBI)

# Connect to the MySQL database: con
con <- dbConnect(RMySQL::MySQL(), 
                 dbname = "tweater", 
                 host = "courses.csrrinzqubik.us-east-1.rds.amazonaws.com", 
                 port = 3306,
                 user = "student",
                 password = "datacamp")

# Get table names
table_names <- dbListTables(con)

# Import all tables
tables <- lapply(table_names, dbReadTable, conn = con)

# Print out tables
tables
#How do the tables relate?
The connection to the MySQL database con has already been created for you. tables, a list containing the three tables as data frames that you've created in the previous exercise, is also available.

If you have a closer look at these tables, you'll see that the tweats table, for example, contains a column user_id. The ids in the column refer to the users that have posted the tweat. Similarly, the comments contain both a user_id and a tweat_id column. It specifies which user posted a comment on which tweat.

With this new knowledge, can you tell who posted the tweat on which somebody commented "awesome! thanks!" (comment 1012)?
#The user with user_id 5, so Oliver.
Query tweater (1)
In your life as a data scientist, you'll often be working with huge databases that contain tables with millions of rows. If you want to do some analyses on this data, it's possible that you only need a fraction of this data. In this case, it's a good idea to send SQL queries to your database, and only import the data you actually need into R.

dbGetQuery() is what you need. As usual, you first pass the connection object to it. The second argument is an SQL query in the form of a character string. This example selects the age variable from the people dataset where gender equals "male":

dbGetQuery(con, "SELECT age FROM people WHERE gender = 'male'")
A connection to the tweater database has already been coded for you.

Instructions
100 XP
Use dbGetQuery() to create a data frame, elisabeth, that selects the tweat_id column from the comments table where elisabeth is the commenter, her user_id is 1
Print out elisabeth so you can see if you queried the database correctly.
# Connect to the database
library(DBI)
con <- dbConnect(RMySQL::MySQL(),
                 dbname = "tweater",
                 host = "courses.csrrinzqubik.us-east-1.rds.amazonaws.com",
                 port = 3306,
                 user = "student",
                 password = "datacamp")

# Import tweat_id column of comments where user_id is 1: elisabeth
 elisabeth<-dbGetQuery(con,"SELECT tweat_id FROM comments WHERE user_id=1")

# Print elisabeth
elisabeth
Query tweater (2)
Apart from checking equality, you can also check for less than and greater than relationships, with < and >, just like in R.

con, a connection to the tweater database, is again available.

Instructions
100 XP
Create a data frame, latest, that selects the post column from the tweats table observations where the date is higher than '2015-09-21'.
Print out latest.
# Connect to the database
library(DBI)
con <- dbConnect(RMySQL::MySQL(),
                 dbname = "tweater",
                 host = "courses.csrrinzqubik.us-east-1.rds.amazonaws.com",
                 port = 3306,
                 user = "student",
                 password = "datacamp")

# Import post column of tweats where date is higher than '2015-09-21': latest
 latest<-dbGetQuery(con,"SELECT post FROM tweats WHERE date>'2015-09-21'")

# Print latest
latest
#Query tweater (3)
Suppose that you have a people table, with a bunch of information. This time, you want to find out the age and country of married males. Provided that there is a married column that's 1 when the person in question is married, the following query would work.

SELECT age, country
  FROM people
    WHERE gender = "male" AND married = 1
Can you use a similar approach for a more specialized query on the tweater database?

Instructions
100 XP
Instructions
100 XP
Create an R data frame, specific, that selects the message column from the comments table where the tweat_id is 77 and the user_id is greater than 4.
Print specific.
# Connect to the database
library(DBI)
con <- dbConnect(RMySQL::MySQL(),
                 dbname = "tweater",
                 host = "courses.csrrinzqubik.us-east-1.rds.amazonaws.com",
                 port = 3306,
                 user = "student",
                 password = "datacamp")

# Create data frame specific
specific<-dbGetQuery(con,"SELECT message 
  FROM comments
    WHERE tweat_id=77 AND user_id>4")

# Print specific
specific
Query tweater (4)
There are also dedicated SQL functions that you can use in the WHERE clause of an SQL query. For example, CHAR_LENGTH() returns the number of characters in a string.

Instructions
100 XP
Create a data frame, short, that selects the id and name columns from the users table where the number of characters in the name is strictly less than 5.
Print short.
# Connect to the database
library(DBI)
con <- dbConnect(RMySQL::MySQL(),
                 dbname = "tweater",
                 host = "courses.csrrinzqubik.us-east-1.rds.amazonaws.com",
                 port = 3306,
                 user = "student",
                 password = "datacamp")

# Create data frame short
short<-dbGetQuery(con,"SELECT id,name 
  FROM users
    WHERE CHAR_LENGTH(name)<5")

# Print short
short
#
Join the query madness!
Of course, SQL does not stop with the the three keywords SELECT, FROM and WHERE. Another very often used keyword is JOIN, and more specifically INNER JOIN. Take this call for example:

SELECT name, post
  FROM users INNER JOIN tweats on users.id = user_id
    WHERE date > "2015-09-19"
Here, the users table is joined with the tweats table. This is possible because the id column in the users table corresponds to the user_id column in the tweats table. Also notice how name, from the users table, and post and date, from the tweats table, can be referenced to without problems.

Can you predict the outcome of the following query?

SELECT post, message
  FROM tweats INNER JOIN comments on tweats.id = tweat_id
    WHERE tweat_id = 77
A connection to the tweater database is already available as con; feel free to experiment!
#A table with four observations, containing two columns: post and message.
Send - Fetch - Clear
You've used dbGetQuery() multiple times now. This is a virtual function from the DBI package, but is actually implemented by the RMySQL package. Behind the scenes, the following steps are performed:

Sending the specified query with dbSendQuery();
Fetching the result of executing the query on the database with dbFetch();
Clearing the result with dbClearResult().
Let's not use dbGetQuery() this time and implement the steps above. This is tedious to write, but it gives you the ability to fetch the query's result in chunks rather than all at once. You can do this by specifying the n argument inside dbFetch().

Instructions
100 XP
Inspect the dbSendQuery() call that has already been coded for you. It selects the comments for the users with an id above 4.
Use dbFetch() twice. In the first call, import only two records of the query result by setting the n argument to 2. In the second call, import all remaining queries (don't specify n). In both calls, simply print the resulting data frames.
Clear res with dbClearResult().
# Connect to the database
library(DBI)
con <- dbConnect(RMySQL::MySQL(),
                 dbname = "tweater",
                 host = "courses.csrrinzqubik.us-east-1.rds.amazonaws.com",
                 port = 3306,
                 user = "student",
                 password = "datacamp")

# Send query to the database
res <- dbSendQuery(con, "SELECT * FROM comments WHERE user_id > 4")

# Use dbFetch() twice
dbFetch(res,2)
dbFetch(res)

# Clear res
dbClearResult(res)
Be polite and ...
Every time you connect to a database using dbConnect(), you're creating a new connection to the database you're referencing. RMySQL automatically specifies a maximum of open connections and closes some of the connections for you, but still: it's always polite to manually disconnect from the database afterwards. You do this with the dbDisconnect() function.

The code that connects you to the database is already available, can you finish the script?

Instructions
100 XP
Instructions
100 XP
Using the technique you prefer, build a data frame long_tweats. It selects the post and date columns from the observations in tweats where the character length of the post variable exceeds 40.
Print long_tweats.
Disconnect from the database by using dbDisconnect().
# Load RMySQL package
library(DBI)

# Connect to the database
library(DBI)
con <- dbConnect(RMySQL::MySQL(),
                 dbname = "tweater",
                 host = "courses.csrrinzqubik.us-east-1.rds.amazonaws.com",
                 port = 3306,
                 user = "student",
                 password = "datacamp")

# Create the data frame  long_tweats
long_tweats<-dbGetQuery(con, "SELECT post,date FROM tweats
WHERE CHAR_LENGTH(post)>40")

# Print long_tweats
print(long_tweats)

# Disconnect from the database
 dbDisconnect(con)
 #
 Import flat files from the web
In the video, you saw that the utils functions to import flat file data, such as read.csv() and read.delim(), are capable of automatically importing from URLs that point to flat files on the web.

You must be wondering whether Hadley Wickham's alternative package, readr, is equally potent. Well, figure it out in this exercise! The URLs for both a .csv file as well as a .delim file are already coded for you. It's up to you to actually import the data. If it works, that is...

Instructions
100 XP
Instructions
100 XP
Load the readr package. It's already installed on DataCamp's servers.
Use url_csv to read in the .csv file it is pointing to. Use the read_csv() function. The .csv contains column names in the first row. Save the resulting data frame as pools.
Similarly, use url_delim to read in the online .txt file. Use the read_tsv() function and store the result as potatoes.
Print pools and potatoes. Looks correct?
# Load the readr package
library(readr)

# Import the csv file: pools
url_csv <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1478/datasets/swimming_pools.csv"
pools<-read_csv(url_csv)

# Import the txt file: potatoes
url_delim <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1478/datasets/potatoes.txt"
potatoes<-read_tsv(url_delim)


# Print pools and potatoes
pools
potatoes
#
Secure importing
In the previous exercises, you have been working with URLs that all start with http://. There is, however, a safer alternative to HTTP, namely HTTPS, which stands for HypterText Transfer Protocol Secure. Just remember this: HTTPS is relatively safe, HTTP is not.

Luckily for us, you can use the standard importing functions with https:// connections since R version 3.2.2.

Instructions
100 XP
Instructions
100 XP
Take a look at the URL in url_csv. It uses a secure connection, https://.
Use read.csv() to import the file at url_csv. The .csv file it is referring to contains column names in the first row. Call it pools1.
Load the readr package. It's already installed on DataCamp's servers.
Use read_csv() to read in the same .csv file in url_csv. Call it pools2.
Print out the structure of pools1 and pools2. Looks like the importing went equally well as with a normal http connection!
# https URL to the swimming_pools csv file.
url_csv <- "https://s3.amazonaws.com/assets.datacamp.com/production/course_1478/datasets/swimming_pools.csv"

# Import the file using read.csv(): pools1
pools1<- read.csv(url_csv)

# Load the readr package
library(readr)

# Import the file using read_csv(): pools2
pools2<- read_csv(url_csv)

# Print the structure of pools1 and pools2
str(pools1)
str(pools2)
Import Excel files from the web
When you learned about gdata, it was already mentioned that gdata can handle .xls files that are on the internet. readxl can't, at least not yet. The URL with which you'll be working is already available in the sample code. You will import it once using gdata and once with the readxl package via a workaround.

Instructions
100 XP
Instructions
100 XP
Load the readxl and gdata packages. They are already installed on DataCamp's servers.
Import the .xls file located at the URL url_xls using read.xls() from gdata. Store the resulting data frame as excel_gdata.
You can not use read_excel() directly with a URL. Complete the following instructions to work around this problem:
Use download.file() to download the .xls file behind the URL and store it locally as "local_latitude.xls".
Call read_excel() to import the local file, "local_latitude.xls". Name the resulting data frame excel_readxl.
#  Load the readxl and gdata package
library(readxl)
library(gdata)

# Specification of url: url_xls
url_xls<- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1478/datasets/latitude.xls"

# Import the .xls file with gdata: excel_gdata
excel_gdata<-read.xls(url_xls)

# Download file behind URL, name it local_latitude.xls
local_latitude.xls<-download.file(url_xls,destfile = "local_latitude.xls")

# Import the local .xls file with readxl: excel_readxl
excel_readxl<- read_excel("local_latitude.xls")
Downloading any file, secure or not
In the previous exercise you've seen how you can read excel files on the web using the read_excel package by first downloading the file with the download.file() function.

There's more: with download.file() you can download any kind of file from the web, using HTTP and HTTPS: images, executable files, but also .RData files. An RData file is very efficient format to store R data.

You can load data from an RData file using the load() function, but this function does not accept a URL string as an argument. In this exercise, you'll first download the RData file securely, and then import the local data file.

Instructions
100 XP
Take a look at the URL in url_rdata. It uses a secure connection, https://. This URL points to an RData file containing a data frame with some metrics on different kinds of wine.
Download the file at url_rdata using download.file(). Call the file "wine_local.RData" in your working directory.
Load the file you created, wine_local.RData, using the load() function. It takes one argument, the path to the file, which is just the filename in our case. After running this command, the variable wine will automatically be available in your workspace.
Print out the summary() of the wine dataset.
#
Downloading any file, secure or not
In the previous exercise you've seen how you can read excel files on the web using the read_excel package by first downloading the file with the download.file() function.

There's more: with download.file() you can download any kind of file from the web, using HTTP and HTTPS: images, executable files, but also .RData files. An RData file is very efficient format to store R data.

You can load data from an RData file using the load() function, but this function does not accept a URL string as an argument. In this exercise, you'll first download the RData file securely, and then import the local data file.

Instructions
100 XP
Take a look at the URL in url_rdata. It uses a secure connection, https://. This URL points to an RData file containing a data frame with some metrics on different kinds of wine.
Download the file at url_rdata using download.file(). Call the file "wine_local.RData" in your working directory.
Load the file you created, wine_local.RData, using the load() function. It takes one argument, the path to the file, which is just the filename in our case. After running this command, the variable wine will automatically be available in your workspace.
Print out the summary() of the wine dataset.
# https URL to the wine RData file.
url_rdata <- "https://s3.amazonaws.com/assets.datacamp.com/production/course_1478/datasets/wine.RData"

# Download the wine file to your working directory
wine_local.RData<-download.file(url_rdata,destfile="wine_local.RData")

# Load the wine data into your workspace using load()
load("wine_local.RData")

# Print out the summary of the wine data
summary(wine)
HTTP? httr! (1)
Downloading a file from the Internet means sending a GET request and receiving the file you asked for. Internally, all the previously discussed functions use a GET request to download files.

httr provides a convenient function, GET() to execute this GET request. The result is a response object, that provides easy access to the status code, content-type and, of course, the actual content.

You can extract the content from the request using the content() function. At the time of writing, there are three ways to retrieve this content: as a raw object, as a character vector, or an R object, such as a list. If you don't tell content() how to retrieve the content through the as argument, it'll try its best to figure out which type is most appropriate based on the content-type.

Instructions
100 XP
Load the httr package. It's already installed on DataCamp's servers.
Use GET() to get the URL stored in url. Store the result of this GET() call as resp.
Print the resp object. What information does it contain?
Get the content of resp using content() and set the as argument to "raw". Assign the resulting vector to raw_content.
Print the first values in raw_content with head()
# Load the httr package
library(httr)

# Get the url, save response to resp
url <- "http://www.example.com/"
resp<- GET(url)

# Print resp
resp

# Get the raw content of resp: raw_content
raw_content<-content(resp,"raw")

# Print the head of raw_content
head(raw_content)
HTTP? httr! (2)
Web content does not limit itself to HTML pages and files stored on remote servers such as DataCamp's Amazon S3 instances. There are many other data formats out there. A very common one is JSON. This format is very often used by so-called Web APIs, interfaces to web servers with which you as a client can communicate to get or store information in more complicated ways.

You'll learn about Web APIs and JSON in the video and exercises that follow, but some experimentation never hurts, does it?

Instructions
100 XP
Instructions
100 XP
Use GET() to get the url that has already been specified in the sample code. Store the response as resp.
Print resp. What is the content-type?
Use content() to get the content of resp. Set the as argument to "text". Simply print out the result. What do you see?
Use content() to get the content of resp, but this time do not specify a second argument. R figures out automatically that you're dealing with a JSON, and converts the JSON to a named R lis
 httr is already loaded

# Get the url
url <- "http://www.omdbapi.com/?apikey=72bc447a&t=Annie+Hall&y=&plot=short&r=json"

 resp<-GET(url)
# Print resp
resp

# Print content of resp as text
 content(resp,"text")

# Print content of resp
content(resp)

#From JSON to R
In the simplest setting, fromJSON() can convert character strings that represent JSON data into a nicely structured R list. Give it a try!

Instructions
100 XP
Load the jsonlite package. It's already installed on DataCamp's servers.
wine_json represents a JSON. Use fromJSON() to convert it to a list, named wine.
Display the structure of wine
# Load the jsonlite package
> library(jsonlite)
> 
> 
> # wine_json is a JSON
> wine_json <- '{"name":"Chateau Migraine", "year":1997, "alcohol_pct":12.4, "color":"red", "awarded":false}'
> 
> # Convert wine_json into a list: wine
> wine<-fromJSON(wine_json)
> 
> # Print structure of wine
> str(wine)
List of 5
 $ name       : chr "Chateau Migraine"
 $ year       : int 1997
 $ alcohol_pct: num 12.4
 $ color      : chr "red"
 $ awarded    : logi FALSE
> Quandl API
As Filip showed in the video, fromJSON() also works if you pass a URL as a character string or the path to a local file that contains JSON data. Let's try this out on the Quandl API, where you can fetch all sorts of financial and economical data.

Instructions
100 XP
quandl_url represents a URL. Use fromJSON() directly on this URL and store the result in quandl_data.
Display the structure of quandl_data.
# jsonlite is preloaded

# Definition of quandl_url
quandl_url <- "https://www.quandl.com/api/v3/datasets/WIKI/FB/data.json?auth_token=i83asDsiWUUyfoypkgMz"

# Import Quandl data: quandl_data
quandl_data<-fromJSON(quandl_url)

# Print structure of quandl_data
str(quandl_data)
JSON practice (1)
JSON is built on two structures: objects and arrays. To help you experiment with these, two JSON strings are included in the sample code. It's up to you to change them appropriately and then call jsonlite's fromJSON() function on them each time.

Instructions
100 XP
Change the assignment of json1 such that the R vector after conversion contains the numbers 1 up to 6, in ascending order. Next, call fromJSON() on json1.
Adapt the code for json2 such that it's converted to a named list with two elements: a, containing the numbers 1, 2 and 3 and b, containing the numbers 4, 5 and 6. Next, call fromJSON() on json2.
# jsonlite is already loaded
> 
> # Challenge 1
> json1 <- '[1, 2, 3,4, 5,6]'
> fromJSON(json1)
[1] 1 2 3 4 5 6
> 
> # Challenge 2
> json2 <- '{"a": [1, 2, 3], "b": [4, 5, 6]}'
> fromJSON(json2)
$a
[1] 1 2 3

$b
[1] 4 5 6
> 
JSON practice (2)
We prepared two more JSON strings in the sample code. Can you change them and call jsonlite's fromJSON() function on them, similar to the previous exercise?

Instructions
100 XP
Remove characters from json1 to build a 2 by 2 matrix containing only 1, 2, 3 and 4. Call fromJSON() on json1.
Add characters to json2 such that the data frame in which the json is converted contains an additional observation in the last row. For this observations, a equals 5 and b equals 6. Call fromJSON() one last time, on json2.
> # jsonlite is already loaded
> 
> # Challenge 1
> json1 <- json1 <- '[[1, 2], [3, 4]]'
> fromJSON(json1)
     [,1] [,2]
[1,]    1    2
[2,]    3    4
> 
> # Challenge 2
> json2 <- '[{"a": 1, "b": 2}, {"a": 3, "b": 4},{"a": 5, "b": 6}]'
> fromJSON(json2)
  a b
1 1 2
2 3 4
3 5 6
> oJSON()
Apart from converting JSON to R with fromJSON(), you can also use toJSON() to convert R data to a JSON format. In its most basic use, you simply pass this function an R object to convert to a JSON. The result is an R object of the class json, which is basically a character string representing that JSON.

For this exercise, you will be working with a .csv file containing information on the amount of desalinated water that is produced around the world. As you'll see, it contains a lot of missing values. This data can be found on the URL that is specified in the sample code.

Instructions
100 XP
Instructions
100 XP
Use a function of the utils package to import the .csv file directly from the URL specified in url_csv. Save the resulting data frame as water. Make sure that strings are not imported as factors.
Convert the data frame water to a JSON. Call the resulting object water_json.
Print out water_json.
# jsonlite is already loaded

# URL pointing to the .csv file
url_csv <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_1478/datasets/water.csv"

# Import the .csv file located at url_csv
water<-read.csv(url_csv,stringsAsFactors = FALSE)


# Convert the data file according to the requirements
water_json<- toJSON(water)

# Print out water_json
water_json
Minify and prettify
JSONs can come in different formats. Take these two JSONs, that are in fact exactly the same: the first one is in a minified format, the second one is in a pretty format with indentation, whitespace and new lines:

# Mini
{"a":1,"b":2,"c":{"x":5,"y":6}}

# Pretty
{
  "a": 1,
  "b": 2,
  "c": {
    "x": 5,
    "y": 6
  }
}
Unless you're a computer, you surely prefer the second version. However, the standard form that toJSON() returns, is the minified version, as it is more concise. You can adapt this behavior by setting the pretty argument inside toJSON() to TRUE. If you already have a JSON string, you can use prettify() or minify() to make the JSON pretty or as concise as possible.

Instructions
100 XP
Instructions
100 XP
Convert the mtcars dataset, which is available in R by default, to a pretty JSON. Call the resulting JSON pretty_json.
Print out pretty_json. Can you understand the output easily?
Convert pretty_json to a minimal version using minify(). Store this version under a new variable, mini_json.
Print out mini_json. Which version do you prefer, the pretty one or the minified one?
# jsonlite is already loaded

# Convert mtcars to a pretty JSON: pretty_json
pretty_json<-  toJSON(mtcars,pretty = TRUE)

# Print pretty_json
pretty_json

# Minify pretty_json: mini_json

mini_json<-minify(pretty_json)
# Print mini_json
mini_json
#
Import SAS data with haven
haven is an extremely easy-to-use package to import data from three software packages: SAS, STATA and SPSS. Depending on the software, you use different functions:

SAS: read_sas()
STATA: read_dta() (or read_stata(), which are identical)
SPSS: read_sav() or read_por(), depending on the file type.
All these functions take one key argument: the path to your local file. In fact, you can even pass a URL; haven will then automatically download the file for you before importing it.

You'll be working with data on the age, gender, income, and purchase level (0 = low, 1 = high) of 36 individuals (Source: SAS). The information is stored in a SAS file, sales.sas7bdat, which is available in your current working directory. You can also download the data here.

Instructions
100 XP
Instructions
100 XP
Load the haven package; it's already installed on DataCamp's servers.
Import the data file "sales.sas7bdat". Call the imported data frame sales.
Display the structure of sales with str(). Some columns represent categorical variables, so they should be factors.
# Load the haven package

library(haven)
# Import sales.sas7bdat: sales
sales<-read_sas("sales.sas7bdat")

# Display the structure of sales
str(sales)
Import STATA data with haven
Next up are STATA data files; you can use read_dta() for these.

When inspecting the result of the read_dta() call, you will notice that one column will be imported as a labelled vector, an R equivalent for the common data structure in other statistical environments. In order to effectively continue working on the data in R, it's best to change this data into a standard R class. To convert a variable of the class labelled to a factor, you'll need haven's as_factor() function.

In this exercise, you will work with data on yearly import and export numbers of sugar, both in USD and in weight. The data can be found at: http://assets.datacamp.com/production/course_1478/datasets/trade.dta

Instructions
100 XP
Instructions
100 XP
Import the data file directly from the URL using read_dta(), and store it as sugar.
Print out the structure of sugar. The Date column has class labelled.
Convert the values in the Date column of sugar to dates, using as.Date(as_factor(___)).
Print out the structure of sugar once more. Looks better now?
# haven is already loaded

# Import the data from the URL: sugar
sugar<-read_dta("http://assets.datacamp.com/production/course_1478/datasets/trade.dta")

# Structure of sugar
str(sugar)

# Convert values in Date column to dates
sugar$Date <-as.Date(as_factor(sugar$Date))

# Structure of sugar again
str(sugar)
#
Import SPSS data with haven
The haven package can also import data files from SPSS. Again, importing the data is pretty straightforward. Depending on the SPSS data file you're working with, you'll need either read_sav() - for .sav files - or read_por() - for .por files.

In this exercise, you will work with data on four of the Big Five personality traits for 434 persons (Source: University of Bath). The Big Five is a psychological concept including, originally, five dimensions of personality to classify human personality. The SPSS dataset is called person.sav and is available in your working directory.

Instructions
100 XP
Use read_sav() to import the SPSS data in "person.sav". Name the imported data frame traits.
traits contains several missing values, or NAs. Run summary() on it to find out how many NAs are contained in each variable.
Print out a subset of those individuals that scored high on Extroversion and on Agreeableness, i.e. scoring higher than 40 on each of these two categories. You can use subset() 
# haven is already loaded

# Import person.sav: traits
traits<-read_sav("person.sav")

# Summarize traits
summary(traits)

# Print out a subset
subset(traits, Extroversion > 40 & Agreeableness > 40)
Factorize, round two
In the last exercise you learned how to import a data file using the command read_sav(). With SPSS data files, it can also happen that some of the variables you import have the labelled class. This is done to keep all the labelling information that was originally present in the .sav and .por files. It's advised to coerce (or change) these variables to factors or other standard R classes.

The data for this exercise involves information on employees and their demographic and economic attributes (Source: QRiE). The data can be found on the following URL:

http://s3.amazonaws.com/assets.datacamp.com/production/course_1478/datasets/employee.sav

Instructions
100 XP
Instructions
100 XP
Import the SPSS data straight from the URL and store the resulting data frame as work.
Display the summary of the GENDER column of work. This information doesn't give you a lot of useful information, right?
Convert the GENDER column in work to a factor, the class to denote categorical variables in R. Use as_factor().
Once again display the summary of the GENDER column. This time, the printout makes much more sense.
# haven is already loaded

# Import SPSS data from the URL: work
work<- read_sav("http://s3.amazonaws.com/assets.datacamp.com/production/course_1478/datasets/employee.sav")

# Display summary of work$GENDER
summary(work$GENDER)


# Convert work$GENDER to a factor
work$GENDER <- as_factor(work$GENDER)


# Display summary of work$GENDER again

summary(work$GENDER)
#
Import STATA data with foreign (1)
The foreign package offers a simple function to import and read STATA data: read.dta().

In this exercise, you will import data on the US presidential elections in the year 2000. The data in florida.dta contains the total numbers of votes for each of the four candidates as well as the total number of votes per election area in the state of Florida (Source: Florida Department of State). The file is available in your working directory, you can download it here if you want to experiment some more.

Instructions
100 XP
Load the foreign package; it's already installed on DataCamp's servers.
Import the data on the elections in Florida, "florida.dta", and name the resulting data frame florida. Use read.dta() without specifying extra arguments.
Check out the last 6 observations of florida with tail()
# Load the foreign package
library(foreign)

# Import florida.dta and name the resulting data frame florida
florida<- read.dta("florida.dta")

# Check tail() of florida
tail(florida,6)
Import STATA data with foreign (2)
Data can be very diverse, going from character vectors to categorical variables, dates and more. It's in these cases that the additional arguments of read.dta() will come in handy.

The arguments you will use most often are convert.dates, convert.factors, missing.type and convert.underscore. Their meaning is pretty straightforward, as Filip explained in the video. It's all about correctly converting STATA data to standard R data structures. Type ?read.dta to find out about about the default values.

The dataset for this exercise contains socio-economic measures and access to education for different individuals (Source: World Bank). This data is available as edequality.dta, which is located in the worldbank folder in your working directory.

Instructions
100 XP
Specify the path to the file using file.path(). Call it path. Remember the "edequality.dta" file is located in the "worldbank" folder.
Use the path variable to import the data file in three different ways; each time show its structure with str():
edu_equal_1: By passing only the file path to read.dta().
edu_equal_2: By passing the file path, and setting convert.factors to FALSE.
edu_equal_3: By passing the file path, and setting convert.underscore to TRUE.
# foreign is already loaded

# Specify the file path using file.path(): path
path<- file.path("worldbank","edequality.dta")

# Create and print structure of edu_equal_1
edu_equal_1<-read.dta(path)
str(edu_equal_1)

# Create and print structure of edu_equal_2
edu_equal_2<-read.dta(path,convert.factors=FALSE)
str(edu_equal_2)


# Create and print structure of edu_equal_3
edu_equal_3<-read.dta(path,convert.underscore= TRUE)
str(edu_equal_3)
Import SPSS data with foreign (1)
All great things come in pairs. Where foreign provided read.dta() to read Stata data, there's also read.spss() to read SPSS data files. To get a data frame, make sure to set to.data.frame = TRUE inside read.spss().

In this exercise, you'll be working with socio-economic variables from different countries (Source: Quantative Data Analysis in Education). The SPSS data is in a file called international.sav, which is in your working directory. You can also download it here if you want to play around with it some more.

Instructions
100 XP
Import the data file "international.sav" and have R convert it to a data frame. Store this data frame as demo.
Create a boxplot of the gdp variable of demo.
# foreign is already loaded

# Import international.sav as a data frame: demo
demo<- read.spss("international.sav",to.data.frame = TRUE)

# Create boxplot of gdp variable of demo
boxplot(demo$gdp)
Import SPSS data with foreign (2)
In the previous exercise, you used the to.data.frame argument inside read.spss(). There are many other ways in which to customize the way your SPSS data is imported.

In this exercise you will experiment with another argument, use.value.labels. It specifies whether variables with value labels should be converted into R factors with levels that are named accordingly. The argument is TRUE by default which means that so called labelled variables inside SPSS are converted to factors inside R.

You'll again be working with the international.sav data, which is available in your current working directory.

Instructions
100 XP
Import the data file "international.sav" as a data frame, demo_1.
Print the first few rows of demo_1 using the head() function.
Import the data file "international.sav" as a data frame, demo_2, but this time in a way such that variables with value labels are not converted to R factors.
Again, print the first few rows of demo_2. Can you tell the difference between the two data frames?
# foreign is already loaded

# Import international.sav as demo_1
demo_1<-read.spss("international.sav",to.data.frame=T)

# Print out the head of demo_1
head(demo_1)

# Import international.sav as demo_2
demo_2<-read.spss("international.sav",to.data.frame=T,use.value.labels=F)
head(demo_2)
# Print out the head of demo_2
